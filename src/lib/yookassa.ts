/**
 * –Æ–ö–∞—Å—Å–∞ API –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è
 * –ë–µ–∑–æ–ø–∞—Å–Ω–∞—è —Ä–∞–±–æ—Ç–∞ —Å –ø–ª–∞—Ç–µ–∂–Ω—ã–º API
 */

// –¢–∏–ø—ã –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –Æ–ö–∞—Å—Å–æ–π
export interface YookassaAmount {
  value: string;
  currency: 'RUB';
}

export interface YookassaPayment {
  id: string;
  status: 'pending' | 'waiting_for_capture' | 'succeeded' | 'canceled';
  paid: boolean;
  amount: YookassaAmount;
  confirmation?: {
    type: 'redirect';
    return_url: string;
    confirmation_url: string;
  };
  created_at: string;
  description?: string;
  metadata?: Record<string, string>;
  payment_method?: {
    type: string;
    id: string;
    saved: boolean;
  };
  recipient?: {
    account_id: string;
    gateway_id: string;
  };
  refundable: boolean;
  test: boolean;
}

export interface CreatePaymentData {
  amount: YookassaAmount;
  description?: string;
  confirmation: {
    type: 'redirect';
    return_url: string;
  };
  capture?: boolean;
  metadata?: Record<string, string>;
}

export interface YookassaError {
  type: string;
  id: string;
  code: string;
  description: string;
  parameter?: string;
}

// –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –Æ–ö–∞—Å—Å–æ–π
export class YookassaConfig {
  private static readonly API_URL = 'https://api.yookassa.ru/v3';
  private static readonly TEST_API_URL = 'https://api.yookassa.ru/v3'; // –í –ø—Ä–æ–¥–∞–∫—à–µ–Ω–µ —Ç–æ—Ç –∂–µ URL
  
  static getApiUrl(): string {
    return this.API_URL;
  }
  
  static getAuthHeader(shopId: string, secretKey: string): string {
    const credentials = btoa(`${shopId}:${secretKey}`);
    return `Basic ${credentials}`;
  }
  
  static generateIdempotenceKey(): string {
    return `${Date.now()}-${Math.random().toString(36).substr(2, 9)}`;
  }
}

// –°–µ—Ä–≤–∏—Å –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –Æ–ö–∞—Å—Å–æ–π
export class YookassaService {
  private apiUrl: string;
  private useDirectApi: boolean;
  
  constructor() {
    this.apiUrl = '/api/yookassa'; // –ù–∞—à –±—ç–∫–µ–Ω–¥ –ø—Ä–æ–∫—Å–∏
    this.useDirectApi = import.meta.env.VITE_YOOKASSA_TEST_MODE === 'true'; // –î–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
  }
  
  /**
   * –°–æ–∑–¥–∞—Ç—å –ø–ª–∞—Ç–µ–∂ (–ø–æ–∫–∞ –º–æ–∫–∞–µ–º –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è)
   */
  async createPayment(data: CreatePaymentData): Promise<YookassaPayment> {
    if (this.useDirectApi) {
      // ‚ö†Ô∏è –¢–û–õ–¨–ö–û –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è! –ú–æ–∫–∞–µ–º –æ—Ç–≤–µ—Ç –Æ–ö–∞—Å—Å—ã
      return this.createMockPayment(data);
    }
    
    try {
      const response = await fetch(`${this.apiUrl}/payments`, {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify(data),
      });
      
      if (!response.ok) {
        const errorData = await response.json().catch(() => ({}));
        throw new Error(errorData.message || `HTTP ${response.status}: –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø–ª–∞—Ç–µ–∂–∞`);
      }
      
      return await response.json();
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø–ª–∞—Ç–µ–∂–∞:', error);
      throw error;
    }
  }
  
  /**
   * –ú–æ–∫ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ø–ª–∞—Ç–µ–∂–µ–π (–∏–º–∏—Ç–∞—Ü–∏—è –Æ–ö–∞—Å—Å—ã)
   */
  private createMockPayment(data: CreatePaymentData): Promise<YookassaPayment> {
    return new Promise((resolve) => {
      setTimeout(() => {
        const mockPayment: YookassaPayment = {
          id: `mock_${Date.now()}`,
          status: 'pending',
          paid: false,
          amount: data.amount,
          confirmation: {
            type: 'redirect',
            return_url: data.confirmation.return_url,
            confirmation_url: `https://yoomoney.ru/checkout/payments/v2/contract?orderId=mock_${Date.now()}`
          },
          created_at: new Date().toISOString(),
          description: data.description,
          metadata: data.metadata,
          refundable: false,
          test: true
        };
        
        console.log('üß™ –°–æ–∑–¥–∞–Ω —Ç–µ—Å—Ç–æ–≤—ã–π –ø–ª–∞—Ç–µ–∂:', mockPayment);
        resolve(mockPayment);
      }, 500); // –ò–º–∏—Ç–∏—Ä—É–µ–º –∑–∞–¥–µ—Ä–∂–∫—É —Å–µ—Ç–∏
    });
  }
  
  /**
   * –ü–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–ª–∞—Ç–µ–∂–µ
   */
  async getPayment(paymentId: string): Promise<YookassaPayment> {
    if (this.useDirectApi && paymentId.startsWith('mock_')) {
      // –ú–æ–∫–∞–µ–º —É—Å–ø–µ—à–Ω—ã–π –ø–ª–∞—Ç–µ–∂ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
      return {
        id: paymentId,
        status: 'succeeded',
        paid: true,
        amount: { value: '100.00', currency: 'RUB' },
        created_at: new Date().toISOString(),
        refundable: true,
        test: true
      };
    }
    
    try {
      const response = await fetch(`${this.apiUrl}/payments/${paymentId}`, {
        method: 'GET',
        headers: {
          'Content-Type': 'application/json',
        },
      });
      
      if (!response.ok) {
        const errorData = await response.json().catch(() => ({}));
        throw new Error(errorData.message || '–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–ª–∞—Ç–µ–∂–µ');
      }
      
      return await response.json();
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø–ª–∞—Ç–µ–∂–∞:', error);
      throw error;
    }
  }
  
  /**
   * –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –ø–ª–∞—Ç–µ–∂
   */
  async capturePayment(paymentId: string, amount?: YookassaAmount): Promise<YookassaPayment> {
    try {
      const response = await fetch(`${this.apiUrl}/payments/${paymentId}/capture`, {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({ amount }),
      });
      
      if (!response.ok) {
        const errorData = await response.json();
        throw new Error(errorData.message || '–û—à–∏–±–∫–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –ø–ª–∞—Ç–µ–∂–∞');
      }
      
      return await response.json();
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –ø–ª–∞—Ç–µ–∂–∞:', error);
      throw error;
    }
  }
  
  /**
   * –û—Ç–º–µ–Ω–∏—Ç—å –ø–ª–∞—Ç–µ–∂
   */
  async cancelPayment(paymentId: string): Promise<YookassaPayment> {
    try {
      const response = await fetch(`${this.apiUrl}/payments/${paymentId}/cancel`, {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
      });
      
      if (!response.ok) {
        const errorData = await response.json();
        throw new Error(errorData.message || '–û—à–∏–±–∫–∞ –æ—Ç–º–µ–Ω—ã –ø–ª–∞—Ç–µ–∂–∞');
      }
      
      return await response.json();
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –æ—Ç–º–µ–Ω—ã –ø–ª–∞—Ç–µ–∂–∞:', error);
      throw error;
    }
  }
  
  /**
   * –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞—Ç—å —Å—É–º–º—É –¥–ª—è –Æ–ö–∞—Å—Å—ã
   */
  static formatAmount(amount: number): YookassaAmount {
    return {
      value: amount.toFixed(2),
      currency: 'RUB'
    };
  }
  
  /**
   * –ü–∞—Ä—Å–∏—Ç—å —Å—É–º–º—É –∏–∑ –Æ–ö–∞—Å—Å—ã
   */
  static parseAmount(amount: YookassaAmount): number {
    return parseFloat(amount.value);
  }
}

// –≠–∫–∑–µ–º–ø–ª—è—Ä —Å–µ—Ä–≤–∏—Å–∞
export const yookassa = new YookassaService();